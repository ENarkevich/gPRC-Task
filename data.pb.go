// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data.proto

package data

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InputImage struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	PartNumber           int32    `protobuf:"varint,2,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InputImage) Reset()         { *m = InputImage{} }
func (m *InputImage) String() string { return proto.CompactTextString(m) }
func (*InputImage) ProtoMessage()    {}
func (*InputImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{0}
}

func (m *InputImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InputImage.Unmarshal(m, b)
}
func (m *InputImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InputImage.Marshal(b, m, deterministic)
}
func (m *InputImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputImage.Merge(m, src)
}
func (m *InputImage) XXX_Size() int {
	return xxx_messageInfo_InputImage.Size(m)
}
func (m *InputImage) XXX_DiscardUnknown() {
	xxx_messageInfo_InputImage.DiscardUnknown(m)
}

var xxx_messageInfo_InputImage proto.InternalMessageInfo

func (m *InputImage) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *InputImage) GetPartNumber() int32 {
	if m != nil {
		return m.PartNumber
	}
	return 0
}

type ImageParts struct {
	RatioX               int32    `protobuf:"varint,1,opt,name=ratio_x,json=ratioX,proto3" json:"ratio_x,omitempty"`
	RatioY               int32    `protobuf:"varint,2,opt,name=ratio_y,json=ratioY,proto3" json:"ratio_y,omitempty"`
	Flag                 bool     `protobuf:"varint,3,opt,name=flag,proto3" json:"flag,omitempty"`
	Parts                []string `protobuf:"bytes,4,rep,name=parts,proto3" json:"parts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageParts) Reset()         { *m = ImageParts{} }
func (m *ImageParts) String() string { return proto.CompactTextString(m) }
func (*ImageParts) ProtoMessage()    {}
func (*ImageParts) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{1}
}

func (m *ImageParts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageParts.Unmarshal(m, b)
}
func (m *ImageParts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageParts.Marshal(b, m, deterministic)
}
func (m *ImageParts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageParts.Merge(m, src)
}
func (m *ImageParts) XXX_Size() int {
	return xxx_messageInfo_ImageParts.Size(m)
}
func (m *ImageParts) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageParts.DiscardUnknown(m)
}

var xxx_messageInfo_ImageParts proto.InternalMessageInfo

func (m *ImageParts) GetRatioX() int32 {
	if m != nil {
		return m.RatioX
	}
	return 0
}

func (m *ImageParts) GetRatioY() int32 {
	if m != nil {
		return m.RatioY
	}
	return 0
}

func (m *ImageParts) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func (m *ImageParts) GetParts() []string {
	if m != nil {
		return m.Parts
	}
	return nil
}

type ImageResult struct {
	ResultImage          string   `protobuf:"bytes,1,opt,name=result_image,json=resultImage,proto3" json:"result_image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageResult) Reset()         { *m = ImageResult{} }
func (m *ImageResult) String() string { return proto.CompactTextString(m) }
func (*ImageResult) ProtoMessage()    {}
func (*ImageResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{2}
}

func (m *ImageResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageResult.Unmarshal(m, b)
}
func (m *ImageResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageResult.Marshal(b, m, deterministic)
}
func (m *ImageResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageResult.Merge(m, src)
}
func (m *ImageResult) XXX_Size() int {
	return xxx_messageInfo_ImageResult.Size(m)
}
func (m *ImageResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageResult.DiscardUnknown(m)
}

var xxx_messageInfo_ImageResult proto.InternalMessageInfo

func (m *ImageResult) GetResultImage() string {
	if m != nil {
		return m.ResultImage
	}
	return ""
}

func init() {
	proto.RegisterType((*InputImage)(nil), "InputImage")
	proto.RegisterType((*ImageParts)(nil), "ImageParts")
	proto.RegisterType((*ImageResult)(nil), "ImageResult")
}

func init() { proto.RegisterFile("data.proto", fileDescriptor_871986018790d2fd) }

var fileDescriptor_871986018790d2fd = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x51, 0x4d, 0x4b, 0xc3, 0x40,
	0x14, 0xa4, 0x1f, 0xa9, 0xfa, 0xb6, 0x07, 0xbb, 0x08, 0x0d, 0x41, 0xb0, 0xee, 0x49, 0x3c, 0x24,
	0x52, 0x3d, 0x79, 0xab, 0x3d, 0xf5, 0x22, 0x12, 0x10, 0xf4, 0x14, 0xb6, 0x31, 0xa6, 0x81, 0x74,
	0x77, 0xd9, 0x6c, 0x40, 0xaf, 0xfe, 0x05, 0x7f, 0x9a, 0x7f, 0xc1, 0x1f, 0xe2, 0xee, 0xdb, 0x62,
	0x72, 0x08, 0xbc, 0x99, 0xd9, 0x37, 0x33, 0x8f, 0x00, 0xbc, 0x71, 0xc3, 0x63, 0xa5, 0xa5, 0x91,
	0xd1, 0x79, 0x29, 0x65, 0x59, 0x17, 0x09, 0x57, 0x55, 0xc2, 0x85, 0x90, 0x86, 0x9b, 0x4a, 0x8a,
	0xc6, 0xab, 0x6c, 0x05, 0xb0, 0x11, 0xaa, 0x35, 0x9b, 0x3d, 0x2f, 0x0b, 0x4a, 0x61, 0xac, 0xb8,
	0xd9, 0x85, 0x83, 0xc5, 0xe0, 0xea, 0x24, 0xc5, 0x99, 0x5e, 0x00, 0x51, 0x5c, 0x9b, 0x4c, 0xb4,
	0xfb, 0x6d, 0xa1, 0xc3, 0xa1, 0x95, 0x82, 0x14, 0x1c, 0xf5, 0x88, 0x0c, 0xdb, 0x59, 0x0b, 0xb7,
	0xfd, 0x64, 0xa9, 0x86, 0xce, 0xe1, 0x48, 0xbb, 0x84, 0xec, 0x03, 0x5d, 0x82, 0x74, 0x82, 0xf0,
	0xa5, 0x13, 0x3e, 0x0f, 0x1e, 0x5e, 0x78, 0x75, 0xa1, 0xef, 0x35, 0x2f, 0xc3, 0x91, 0x65, 0x8f,
	0x53, 0x9c, 0xe9, 0x19, 0x04, 0x2e, 0xa1, 0x09, 0xc7, 0x8b, 0x91, 0x6d, 0xe2, 0x01, 0xbb, 0x01,
	0x82, 0x49, 0x69, 0xd1, 0xb4, 0xb5, 0xa1, 0x97, 0x30, 0xd5, 0x38, 0x65, 0x95, 0x63, 0x0f, 0xad,
	0x89, 0xe7, 0xf0, 0xe1, 0xf2, 0x01, 0x60, 0xad, 0xa5, 0x52, 0xfe, 0xbc, 0x3b, 0x08, 0x72, 0x87,
	0x28, 0x89, 0xbb, 0xa3, 0x23, 0x0b, 0xfe, 0xeb, 0xb3, 0xd9, 0xd7, 0xcf, 0xef, 0xf7, 0x90, 0xb0,
	0x49, 0x82, 0x2f, 0xef, 0x07, 0xd7, 0xcb, 0x67, 0x38, 0x5d, 0x4b, 0x91, 0x73, 0x53, 0x08, 0xfb,
	0x79, 0xa7, 0x15, 0x90, 0xbc, 0xe3, 0x68, 0xdf, 0x22, 0x9a, 0xc6, 0xbd, 0x92, 0x6c, 0x8e, 0x86,
	0x33, 0x36, 0x4d, 0x7a, 0x0b, 0xd6, 0x76, 0x3b, 0xc1, 0x1f, 0x70, 0xfb, 0x17, 0x00, 0x00, 0xff,
	0xff, 0x11, 0xbb, 0xdf, 0x88, 0xac, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CroppImageClient is the client API for CroppImage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CroppImageClient interface {
	Cropp(ctx context.Context, in *InputImage, opts ...grpc.CallOption) (*ImageParts, error)
}

type croppImageClient struct {
	cc *grpc.ClientConn
}

func NewCroppImageClient(cc *grpc.ClientConn) CroppImageClient {
	return &croppImageClient{cc}
}

func (c *croppImageClient) Cropp(ctx context.Context, in *InputImage, opts ...grpc.CallOption) (*ImageParts, error) {
	out := new(ImageParts)
	err := c.cc.Invoke(ctx, "/CroppImage/cropp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CroppImageServer is the server API for CroppImage service.
type CroppImageServer interface {
	Cropp(context.Context, *InputImage) (*ImageParts, error)
}

// UnimplementedCroppImageServer can be embedded to have forward compatible implementations.
type UnimplementedCroppImageServer struct {
}

func (*UnimplementedCroppImageServer) Cropp(ctx context.Context, req *InputImage) (*ImageParts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cropp not implemented")
}

func RegisterCroppImageServer(s *grpc.Server, srv CroppImageServer) {
	s.RegisterService(&_CroppImage_serviceDesc, srv)
}

func _CroppImage_Cropp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CroppImageServer).Cropp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CroppImage/Cropp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CroppImageServer).Cropp(ctx, req.(*InputImage))
	}
	return interceptor(ctx, in, info, handler)
}

var _CroppImage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CroppImage",
	HandlerType: (*CroppImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "cropp",
			Handler:    _CroppImage_Cropp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data.proto",
}

// ConcatenateImageClient is the client API for ConcatenateImage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConcatenateImageClient interface {
	Concatenate(ctx context.Context, in *ImageParts, opts ...grpc.CallOption) (*ImageResult, error)
}

type concatenateImageClient struct {
	cc *grpc.ClientConn
}

func NewConcatenateImageClient(cc *grpc.ClientConn) ConcatenateImageClient {
	return &concatenateImageClient{cc}
}

func (c *concatenateImageClient) Concatenate(ctx context.Context, in *ImageParts, opts ...grpc.CallOption) (*ImageResult, error) {
	out := new(ImageResult)
	err := c.cc.Invoke(ctx, "/ConcatenateImage/concatenate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConcatenateImageServer is the server API for ConcatenateImage service.
type ConcatenateImageServer interface {
	Concatenate(context.Context, *ImageParts) (*ImageResult, error)
}

// UnimplementedConcatenateImageServer can be embedded to have forward compatible implementations.
type UnimplementedConcatenateImageServer struct {
}

func (*UnimplementedConcatenateImageServer) Concatenate(ctx context.Context, req *ImageParts) (*ImageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Concatenate not implemented")
}

func RegisterConcatenateImageServer(s *grpc.Server, srv ConcatenateImageServer) {
	s.RegisterService(&_ConcatenateImage_serviceDesc, srv)
}

func _ConcatenateImage_Concatenate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageParts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcatenateImageServer).Concatenate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConcatenateImage/Concatenate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcatenateImageServer).Concatenate(ctx, req.(*ImageParts))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConcatenateImage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ConcatenateImage",
	HandlerType: (*ConcatenateImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "concatenate",
			Handler:    _ConcatenateImage_Concatenate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data.proto",
}
